newdata = iris[1, 2:4]
newdata
as.matrix(newdata)
fit = main(Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width, data = iris)
fit$beta_hat
real_fit = lm(Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width, data = iris)
real_fit$coefficients
fit$residuals
real_fit$residuals
as.matrix(newdata)
fit$beta_hat[-1,] %*% T(as.matrix(newdata))
fit$beta_hat[-1,] %*% t(as.matrix(newdata))
fit$beta_hat[1,] + fit$beta_hat[-1,] %*% t(as.matrix(newdata))
predict(real_fit, newdata = newdata)
predict(real_fit, newdata = newdata)
fit$beta_hat[1,] + fit$beta_hat[-1,] %*% t(as.matrix(newdata))
pred_value = function(model, newdata) {
return(fit$beta_hat[1,] + fit$beta_hat[-1,] %*% t(as.matrix(newdata)))
}
pred_value(fit, newdata = iris[1, 2:4])
predict(real_fit, newdata = iris[1, 1:4])
pred_value(fit, newdata = iris[1, 2:4])
iris[1, 1:4]
iris[1, 2:4]
predict(real_fit, newdata = iris[1, 1:4])
pred_value(fit, newdata = iris[1, 1:4])
pred_value(fit, newdata = iris[1, 2:4])
RegLin = function(formula, data) {
terms = all.vars(formula)
Y = data[[terms[1]]]
X_vars = terms[-1]
X = as.matrix(cbind(1, data[X_vars]))
beta_hat = coeficients(X, Y)
residuals = residuals_reg(X, Y, beta_hat)
fitted = fitted_values(X, beta_hat)
lista = list(beta_hat = beta_hat, residuals = residuals, fitted = fitted)
return(lista)
}
fit = RegLin(Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width, data = iris)
real_fit = lm(Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width, data = iris)
predict(real_fit, newdata = iris[1, 1:4])
pred_value(fit, newdata = iris[1, 2:4])
iris[1, 1:4]
iris[1, 2:4]
predict(real_fit, newdata = iris[1, 1:4])
pred_value(fit, newdata = iris[1, 2:4])
plot(real_fit)
plot_res = function(model) {
return(plot(model$fitted, Y))
}
plot_res(fit)
RegLin = function(formula, data) {
terms = all.vars(formula)
Y = data[[terms[1]]]
X_vars = terms[-1]
X = as.matrix(cbind(1, data[X_vars]))
beta_hat = coeficients(X, Y)
residuals = residuals_reg(X, Y, beta_hat)
fitted = fitted_values(X, beta_hat)
lista = list(beta_hat = beta_hat, residuals = residuals, fitted = fitted, X = X, Y = Y)
return(lista)
}
plot_res = function(model) {
return(plot(model$fitted, model$Y))
}
plot_res(fit)
plot_res = function(model) {
return(plot(x = model$fitted, y = model$Y))
}
plot_res(fit)
fit$fitted
plot_res = function(model) {
x = model$fitted
y = model$Y
return(plot(x,y))
}
plot_res(fit)
fit = RegLin(Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width, data = iris)
plot_res(fit)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
plot_res = function(model) {
return(plot(x = model$fitted,y = model$Y))
}
source("~/.active-rstudio-document", echo=TRUE)
plot(real_fit)
data = data.frame(a = runif(1000), b = runif(1000, 10, 20), c = runif(1000, 30, 40))
head(runif)
head(data)
plot(real_fit$fitted.values. y = iris$Sepal.Length)
plot(real_fit$fitted.values, y = iris$Sepal.Length)
plot_res(fit)
plot(real_fit$fitted.values, y = iris$Sepal.Length)
plot(real_fit)
help(sum)
#' @description
#'
#' @param formula
#' @param data
#'
#' @return
#'
#' @examples
#'
#' @export
RegLin = function(formula, data) {
terms = all.vars(formula)
Y = data[[terms[1]]]
X_vars = terms[-1]
X = as.matrix(cbind(1, data[X_vars]))
beta_hat = coeficients(X, Y)
residuals = residuals_reg(X, Y, beta_hat)
fitted = fitted_values(X, beta_hat)
lista = list(beta_hat = beta_hat, residuals = residuals, fitted = fitted, X = X, Y = Y)
return(lista)
}
coeficients = function(X, Y) {
return(solve(t(X) %*% X) %*% t(X) %*% Y)
}
fitted_values = function(X, beta_hat) {
return(X %*% beta_hat)
}
predict_reglin = function(model, newdata) {
return(fit$beta_hat[1,] + fit$beta_hat[-1,] %*% t(as.matrix(newdata)))
}
#'
#' @description
#'
#' @param model
#'
#' @return
#'
#' @examples
#'
#' @export
plot_reglin = function(model) {
return(plot(x = model$fitted,y = model$Y, pch = 19))
}
coeficients = function(X, Y) {
return(solve(t(X) %*% X) %*% t(X) %*% Y)
}
#'
#' @description
#'
#' @param model
#'
#' @return
#'
#' @examples
#'
#' @export
plot_reglin = function(model) {
return(plot(x = model$fitted,y = model$Y, pch = 19))
}
fitted_values = function(X, beta_hat) {
return(X %*% beta_hat)
}
#' @description
#'
#' @param model
#' @param newdata
#'
#' @return
#'
#' @examples
#'
#' @export
predict_reglin = function(model, newdata) {
return(fit$beta_hat[1,] + fit$beta_hat[-1,] %*% t(as.matrix(newdata)))
}
residuals_reg = function(X, Y, beta_hat) {
return(Y - (X %*% beta_hat))
}
#' @description
#'
#' @param formula
#' @param data
#'
#' @return
#'
#' @examples
#'
#' @export
RegLin = function(formula, data) {
terms = all.vars(formula)
Y = data[[terms[1]]]
X_vars = terms[-1]
X = as.matrix(cbind(1, data[X_vars]))
beta_hat = coeficients(X, Y)
residuals = residuals_reg(X, Y, beta_hat)
fitted = fitted_values(X, beta_hat)
lista = list(beta_hat = beta_hat, residuals = residuals, fitted = fitted, X = X, Y = Y)
return(lista)
}
head(iris)
fit = RegLin(Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width, data = iris)
real_fit = lm(Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width, data = iris)
fit$beta_hat == real_fit
fit$beta_hat
plot_reglin(fit)
plot(real_fit)
#'
#' @description
#'
#' @param model
#'
#' @return
#'
#' @examples
#'
#' @export
plot_reglin = function(model) {
return(plot(x = model$fitted,y = model$Y, pch = 19, main = "Preditos vs Observados", xlab = "Preditos", ylab = "Observados"))
}
plot(real_fit)
plot_reglin(fit)
source("~/.active-rstudio-document", echo=TRUE)
formula = Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width
data = iris
terms = all.vars(formula)
Y = data[[terms[1]]]
is.double(Y)
!is.double(Y)
!is.double(Y) | !is.numeric(Y)
if (!is.double(Y) | !is.numeric(Y)) {
print("error")
}
formula = Species ~ Sepal.Width + Petal.Length + Petal.Width
data = iris
terms = all.vars(formula)
Y = data[[terms[1]]]
if (!is.double(Y) | !is.numeric(Y)) {
print("error")
}
RegLin(Species ~ Sepal.Width + Petal.Length + Petal.Width, data = iris)
#' @description
#'
#' @param formula
#' @param data
#'
#' @return
#'
#' @examples
#'
#' @export
RegLin = function(formula, data) {
terms = all.vars(formula)
Y = data[[terms[1]]]
X_vars = terms[-1]
X = as.matrix(cbind(1, data[X_vars]))
if (!is.double(Y) | !is.numeric(Y)) {
stop("Y deve ser uma variável do tipo numérica.")
}
beta_hat = coeficients(X, Y)
residuals = residuals_reg(X, Y, beta_hat)
fitted = fitted_values(X, beta_hat)
lista = list(beta_hat = beta_hat, residuals = residuals, fitted = fitted, X = X, Y = Y)
return(lista)
}
RegLin(Species ~ Sepal.Width + Petal.Length + Petal.Width, data = iris)
X = as.matrix(cbind(1, data[X_vars]))
formula = Species ~ Sepal.Width + Petal.Length + Petal.Width
data = iris
terms = all.vars(formula)
Y = data[[terms[1]]]
X_vars = terms[-1]
X = as.matrix(cbind(1, data[X_vars]))
X
formula = Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width + Species
data = iris
terms = all.vars(formula)
Y = data[[terms[1]]]
X_vars = terms[-1]
X = as.matrix(cbind(1, data[X_vars]))
X
is.character(X)
formula = Species ~ Sepal.Width + Petal.Length + Petal.Width
data = iris
terms = all.vars(formula)
Y = data[[terms[1]]]
y
Y
is.character(Y)
is.character(Y) | is.factor(Y)
#' @description
#'
#' @param formula
#' @param data
#'
#' @return
#'
#' @examples
#'
#' @export
RegLin = function(formula, data) {
terms = all.vars(formula)
Y = data[[terms[1]]]
X_vars = terms[-1]
X = as.matrix(cbind(1, data[X_vars]))
if (is.character(Y) | is.factor(Y) | is.character(X) | is.factor(X)) {
stop("Y e X deve ser uma variável do tipo numérica.")
}
beta_hat = coeficients(X, Y)
residuals = residuals_reg(X, Y, beta_hat)
fitted = fitted_values(X, beta_hat)
lista = list(beta_hat = beta_hat, residuals = residuals, fitted = fitted, X = X, Y = Y)
return(lista)
}
source("~/.active-rstudio-document", echo=TRUE)
#' @description
#'
#' @param formula
#' @param data
#'
#' @return
#'
#' @examples
#'
#' @export
RegLin = function(formula, data) {
terms = all.vars(formula)
Y = data[[terms[1]]]
X_vars = terms[-1]
X = as.matrix(cbind(1, data[X_vars]))
if (is.character(Y) | is.factor(Y) | is.character(X) | is.factor(X)) {
stop("Y e X devem ser uma variável do tipo numérica.")
}
beta_hat = coeficients(X, Y)
residuals = residuals_reg(X, Y, beta_hat)
fitted = fitted_values(X, beta_hat)
lista = list(beta_hat = beta_hat, residuals = residuals, fitted = fitted, X = X, Y = Y)
return(lista)
}
#' @description
#'
#' @param formula
#' @param data
#'
#' @return
#'
#' @examples
#'
#' @export
RegLin = function(formula, data) {
terms = all.vars(formula)
Y = data[[terms[1]]]
X_vars = terms[-1]
X = as.matrix(cbind(1, data[X_vars]))
if (is.character(Y) | is.factor(Y) | is.character(X) | is.factor(X)) {
stop("Y e X devem ser uma variável numérica.")
}
beta_hat = coeficients(X, Y)
residuals = residuals_reg(X, Y, beta_hat)
fitted = fitted_values(X, beta_hat)
lista = list(beta_hat = beta_hat, residuals = residuals, fitted = fitted, X = X, Y = Y)
return(lista)
}
source("~/.active-rstudio-document", echo=TRUE)
RegLin(Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width, data = iris)
RegLin(Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width + Species, data = iris)
#' @description
#'
#' @param formula
#' @param data
#'
#' @return
#'
#' @examples
#'
#' @export
RegLin = function(formula, data) {
terms = all.vars(formula)
Y = data[[terms[1]]]
X_vars = terms[-1]
X = as.matrix(cbind(1, data[X_vars]))
if (is.character(Y) | is.factor(Y) | is.character(X) | is.factor(X)) {
stop("Y e X devem ser apenas numéricos.")
}
beta_hat = coeficients(X, Y)
residuals = residuals_reg(X, Y, beta_hat)
fitted = fitted_values(X, beta_hat)
lista = list(beta_hat = beta_hat, residuals = residuals, fitted = fitted, X = X, Y = Y)
return(lista)
}
RegLin(Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width + Species, data = iris)
RegLin(Species ~ Sepal.Width + Petal.Length + Petal.Width, data = iris)
coeficients = function(X, Y) {
return(solve(t(X) %*% X) %*% t(X) %*% Y)
}
fitted_values = function(X, beta_hat) {
return(X %*% beta_hat)
}
#' @description
#'
#' @param formula
#' @param data
#'
#' @return
#'
#' @examples
#'
#' @export
RegLin = function(formula, data) {
terms = all.vars(formula)
Y = data[[terms[1]]]
X_vars = terms[-1]
X = as.matrix(cbind(1, data[X_vars]))
if (is.character(Y) | is.factor(Y) | is.character(X) | is.factor(X)) {
stop("Y e X devem ser apenas numéricos.")
}
beta_hat = coeficients(X, Y)
residuals = residuals_reg(X, Y, beta_hat)
fitted = fitted_values(X, beta_hat)
lista = list(beta_hat = beta_hat, residuals = residuals, fitted = fitted, X = X, Y = Y)
return(lista)
}
residuals_reg = function(X, Y, beta_hat) {
return(Y - (X %*% beta_hat))
}
#' @description
#'
#' @param model
#' @param newdata
#'
#' @return
#'
#' @examples
#'
#' @export
predict_reglin = function(model, newdata) {
return(fit$beta_hat[1,] + fit$beta_hat[-1,] %*% t(as.matrix(newdata)))
}
#'
#' @description
#'
#' @param model
#'
#' @return
#'
#' @examples
#'
#' @export
plot_reglin = function(model) {
return(plot(x = model$fitted,y = model$Y, pch = 19, main = "Preditos vs Observados", xlab = "Preditos", ylab = "Observados"))
}
fit = RegLin(Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width)
fit = RegLin(Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width, data = iris)
fit$beta_hat
real_fit = lm(Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width, data = iris)
fit$beta_hat
real_fit$coefficients
fit$residuals
summary(fit$residuals)
summary(real_fit$residuals)
fit$X
summary(fit$fitted)
summary(real_fit$fitted.values)
plot_reglin(fit)
new_iris = iris
new_iris$const = 2
head(new_iris)
fit = RegLin(Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width + const,
data = new_iris)
real_fit = lm(Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width + const,
data = new_iris)
real_fit$coefficients
U[5,5]
class(new_iris$const)
fit = RegLin(Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width
data = new_iris)
fit = RegLin(Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width,
data = new_iris)
fit$beta_hat
real_fit$coefficients
real_fit = lm(Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width,
data = new_iris)
real_fit$coefficients
unique(new_iris$const)
new_iris = iris
new_iris$const = 2
terms = all.vars(formula)
Y = data[[terms[1]]]
X_vars = terms[-1]
X = as.matrix(cbind(1, data[X_vars]))
unique(X)
new_iris = iris
new_iris$const = 2
terms = all.vars(formula)
Y = data[[terms[1]]]
X_vars = terms[-1]
Y = data[[terms[1]]]
formula = Sepal.Length ~ Sepal.Width + Petal.Width + Petal.Length + const
new_iris = iris
formula = Sepal.Length ~ Sepal.Width + Petal.Width + Petal.Length + const
new_iris = iris
new_iris$const = 2
terms = all.vars(formula)
Y = data[[terms[1]]]
formula = Sepal.Length ~ Sepal.Width + Petal.Width + Petal.Length + const
new_iris = iris
new_iris$const = 2
data = new_iris
terms = all.vars(formula)
Y = data[[terms[1]]]
X_vars = terms[-1]
X = as.matrix(cbind(1, data[X_vars]))
X
unique(X)
unique(X_vars)
unique(X)
len(X)
length(X)
